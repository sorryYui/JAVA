 红黑树中，删除一个节点往大的说，只有以下四种情况。
    1.删除的节点的左、右子树都非空；
    2.删除的节点的左子树为空树，右子树非空；
    3.删除的节点的右子树为空树，左子树非空；
    4.删除的节点的左、右子树都为空树；
    其中情况一，可以按与其他二叉搜索树的删除方式一样处理，最终可以转换到后面的三种情况。
    具体为：找到(Old)D节点的直接后继节点(暂且称为X节点)，然后将X的值转移到D节点，最后将X节点作为真正要被删除掉的节点(即：(Real)D节点)。
    这样删除操作后，可以保证该树仍然为一棵二叉搜索树。但由于红黑树的定义(即：红黑树的性质)约定。这样删除(Real)D节点后，可能会破坏红黑树的性质，需要修复。
所有情况都可以转化为删除叶子节点，叶子节点只有红色和黑色两种属性。
  1.叶子节点为红色
    直接删除，不影响红黑树的性质。
  2.叶子节点为黑色
    删除该节点后该路径的黑色节点数-1，不符合红黑树的性质，需要调整。
红黑树调整：
  1.被删除的节点为左节点
    1.兄弟节点为黑色，且兄弟节点有一个右节点。
    解决方案：
      1.将父节点的颜色赋给兄弟节点。
      2.将父节点和兄弟节点的右节点的颜色改为黑色。
      3.对父节点左旋转。
    2.兄弟节点为黑色，且兄弟节点有一个左节点。
      解决方案：
        1.将兄弟节点设为红色，将其左节点设为黑色。
        2.对兄弟节点进行右旋转。
        3.情况已经变成1.1，按1.1的情况解决。
    3.兄弟节点为黑色，且有两个节点。
      解决方案：
        1.将父节点的颜色赋给兄弟节点。
        2.将兄弟节点的右孩子和父节点的颜色设为黑色。
        3.对父节点进行左旋转。
    4.兄弟节点为黑色，且没有左右节点。
      解决方案：
        1.将兄弟节点设为红色。
        2.以父节点向上递归，直到根节点或者红色节点。
        3.若为红色节点，根据情况调整。
    5.兄弟节点为红色
      解决方案：
        1.将兄弟节点设为黑色，将兄弟节点的左孩子设为红色。
        2.对父节点进行左旋转。
  2.被删除的节点为右节点
    1.兄弟节点为黑色，且有一个左节点。
      解决方案：
        1.将父节点的颜色赋给兄弟节点。
        2.将父节点和兄弟节点的左孩子的颜色设为黑色。
        3.对兄弟节点进行右旋转。
     2.兄弟节点为黑色，且有一个右节点。
      解决方案：
        1.将兄弟节点的右节点设为黑色，兄弟节点设为红色。
        2.对兄弟节点进行左旋转。
        3.按照2.1的解决方案解决。
     3.兄弟节点为黑色，且有两个节点
      解决方案：
        1.将父节点的颜色赋给兄弟节点。
        2.将父节点的颜色和兄弟节点的左孩子设为黑色。
        3.对兄弟节点进行右旋转。
     4.兄弟节点为黑色，且没有左右节点
      解决方案：
        按照1.4解决；
     5.兄弟节点为红色
      解决方案：
        1.将兄弟节点的颜色设为黑色。
        2.将兄弟节点的左节点的颜色设为红色。
        3.将父节点的颜色设为红色。
        4.对兄弟节点进行右旋转。
