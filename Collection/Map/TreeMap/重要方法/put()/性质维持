1.为根节点
  若新加入的节点没有父节点，则直接将该节点设为根节点，并且颜色设为黑色。
2.父节点为黑色
  直接将其插入父节点的子节点，并将颜色设为红色。
3.父节点P为红色且P的兄弟也为红色
  设父节点P的父节点为G，有P、U节点变黑、G节点变红。这时由于经过节点P、U的路径都必须经过G所以在这些路径上面的黑节点数目还是相同的。
  但是经过上面的处理，可能G节点的父节点也是红色，这个时候我们需要将G节点当做新增节点递归处理。
4.父节点P为红色，叔节点U为黑色或者缺少，且新增节点N为P的右孩子。
  对于这种情况我们对新增节点N、P进行一次左旋转。这里所产生的结果其实并没有完成，还不是平衡的（违反了规则四），这是我们需要进行情况5的操作。
5.父节点P为红色，叔节点U为黑色或者缺少，且新增节点N为P的左孩子。
  这种情况有可能是由于情况四而产生的，也有可能不是。对于这种情况先已P节点为中心进行右旋转，在旋转后产生的树中，节点P是节点N、G的父节点。
  但是这棵树并不规范，它违反了规则4，所以我们将P、G节点的颜色进行交换，使之其满足规范。
  开始时所有的路径都需要经过G其他们的黑色节点数一样，但是现在所有的路径改为经过P，且P为整棵树的唯一黑色节点，所以调整后的树同样满足规范5。
