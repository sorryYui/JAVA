  Java内存模型中，不可变的对象一定是线程安全的，无论对象的方法实现还是方法的调用者，都不需要再进行任何线程安全保障措施。
  被final修饰的字段在构造器中一旦被初始化完成，并且构造器没有吧“this”的引用传递出去，那么在其他线程中就能看见final字段的值。并且外部可见状态永远都不会改变，永远都不会看到它在多个线程之
中处于不一致的状态。“不可变”带来的安全性是最直接、最纯粹的。
  在Java中如果共享数据是一个基本类型，那么在定义时使用final修饰它就可以保证它是不可变的。如果共享数据是一个对象，那就需要对象自行保证其行为不会对其状态产生任何影响才行。
例如java.lang.String类的对象实例，它的substring()、replace()、concat()这些方法都不会影响它原来的值，只会返回一个新构造的字符串对象。
保证对象行为不影响自己状态的途径有很多种，最简单的一种就是把对象里面带有状态的变量都声明为final，这样在构造函数结束后，他就是不可变的。
  除了String之外，还有枚举类型以及java.lang.Number的部分子类，如Long和Double等数值包装类型、BigInteger和BigDecimal等大数据类型。
